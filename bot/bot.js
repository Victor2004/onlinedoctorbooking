const { Telegraf } = require("telegraf");
const axios = require("axios");
require("dotenv").config();

module.exports = (botData) => {
  const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
  const WEB_SERVER_URL = process.env.WEB_SERVER_URL;
  const TELEGRAM_GROUP_ID = process.env.TELEGRAM_GROUP_ID; // –î–æ–±–∞–≤–ª—è–µ–º ID –≥—Ä—É–ø–ø—ã

  if (!BOT_TOKEN) {
    console.error("‚ùå TELEGRAM_BOT_TOKEN is not set in .env file");
    return;
  }

  const bot = new Telegraf(BOT_TOKEN);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
  async function sendAppointmentNotification(appointmentData) {
    if (!TELEGRAM_GROUP_ID) {
      console.error("‚ùå TELEGRAM_GROUP_ID is not set in .env file");
      return false;
    }

    try {
      const message = formatAppointmentMessage(appointmentData);
      await bot.telegram.sendMessage(TELEGRAM_GROUP_ID, message, {
        parse_mode: "HTML",
      });
      console.log("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É");
      return true;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É:", error.message);
      return false;
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø–∏—Å–∏
  function formatAppointmentMessage(appointmentData) {
    const { doctor, date, time, patient, parentInfo } = appointmentData;

    let message = `üÜï <b>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º</b>\n\n`;
    message += `<b>üë®‚Äç‚öïÔ∏è –í—Ä–∞—á:</b> ${doctor.name}\n`;
    message += `<b>üìÖ –î–∞—Ç–∞:</b> ${formatDisplayDateForTelegram(date)}\n`;
    message += `<b>‚è∞ –í—Ä–µ–º—è:</b> ${time}\n\n`;

    message += `<b>üë§ –ü–∞—Ü–∏–µ–Ω—Ç:</b>\n`;
    message += `‚Ä¢ –§–ò–û: ${patient.fullName}\n`;
    message += `‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${patient.phone}\n`;
    message += `‚Ä¢ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${formatDateForTelegram(patient.birthDate)}\n`;

    if (patient.email) {
      message += `‚Ä¢ Email: ${patient.email}\n`;
    }

    if (patient.isChild) {
      message += `‚Ä¢ üë∂ –†–µ–±–µ–Ω–æ–∫\n`;
    }

    if (patient.isMobilePatient) {
      message += `‚Ä¢ ‚ôø –ù–µ –º–æ–±–∏–ª—å–Ω—ã–π –ø–∞—Ü–∏–µ–Ω—Ç\n`;
    }

    if (parentInfo) {
      message += `\n<b>üë®‚Äçüë¶ –î–∞–Ω–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª—è:</b>\n`;
      message += `‚Ä¢ –§–ò–û: ${parentInfo.fullName}\n`;
      message += `‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${parentInfo.phone}\n`;
      if (parentInfo.email) {
        message += `‚Ä¢ Email: ${parentInfo.email}\n`;
      }
    }

    message += `\nüìã <b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–∞—á–∞:</b>\n${doctor.specialty}`;

    return message;
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç
  function formatDisplayDateForTelegram(dateString) {
    const date = new Date(dateString + "T00:00:00");
    const days = [
      "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
      "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
      "–í—Ç–æ—Ä–Ω–∏–∫",
      "–°—Ä–µ–¥–∞",
      "–ß–µ—Ç–≤–µ—Ä–≥",
      "–ü—è—Ç–Ω–∏—Ü–∞",
      "–°—É–±–±–æ—Ç–∞",
    ];
    const months = [
      "—è–Ω–≤.",
      "—Ñ–µ–≤.",
      "–º–∞—Ä.",
      "–∞–ø—Ä.",
      "–º–∞—è",
      "–∏—é–Ω.",
      "–∏—é–ª.",
      "–∞–≤–≥.",
      "—Å–µ–Ω.",
      "–æ–∫—Ç.",
      "–Ω–æ—è.",
      "–¥–µ–∫.",
    ];

    const day = date.getDate();
    const month = months[date.getMonth()];
    const year = date.getFullYear();
    const dayName = days[date.getDay()];

    return `${day} ${month} ${year} (${dayName})`;
  }

  function formatDateForTelegram(dateString) {
    const date = new Date(dateString);
    const day = String(date.getDate()).padStart(2, "0");
    const month = String(date.getMonth() + 1).padStart(2, "0");
    const year = date.getFullYear();
    return `${day}.${month}.${year}`;
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  const sendBotEvent = async (type, data) => {
    try {
      await axios.post(`${WEB_SERVER_URL}/api/bot-event`, {
        type,
        data,
      });
    } catch (error) {
      console.error("Error sending bot event:", error.message);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –µ–≥–æ id
  async function sendMessageToUser(userId, message, options = {}) {
    try {
      const messageOptions = {
        parse_mode: options.parse_mode || "HTML",
        ...options,
      };

      await bot.telegram.sendMessage(userId, message, messageOptions);
      console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
      return true;
    } catch (error) {
      console.error(
        `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`,
        error.message
      );

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
      if (error.description === "Forbidden: bot was blocked by the user") {
        console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞`);
      } else if (error.description === "Bad Request: chat not found") {
        console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      return false;
    }
  }

  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
  module.exports.sendMessageToUser = sendMessageToUser;
  module.exports.sendAppointmentNotification = sendAppointmentNotification;

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
  bot.start(async (ctx) => {
    const user = ctx.from;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    // await sendBotEvent("user_start", {
    //   userId: user.id,
    //   firstName: user.first_name,
    //   lastName: user.last_name,
    //   username: user.username,
    //   chatId: ctx.chat.id,
    // });

    const welcomeMessage = `
üëã –ü—Ä–∏–≤–µ—Ç, ${user.first_name}!

ü§ñ –Ø Telegram –±–æ—Ç –±—É–¥—É

üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/profile - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ`;

    await ctx.reply(welcomeMessage, {
      reply_markup: {
        keyboard: [
          // ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üë§ –ü—Ä–æ—Ñ–∏–ª—å"],
          // ["üåê –°–∞–π—Ç", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"],
          ["üë§ –ü—Ä–æ—Ñ–∏–ª—å"],
        ],
        resize_keyboard: true,
      },
    });

    //     sendMessageToUser(
    //       99999,
    //       `üë§ ${user.first_name} ${user.last_name || "–ù–µ —É–∫–∞–∑–∞–Ω–∞"} @${
    //         user.username || "–ù–µ —É–∫–∞–∑–∞–Ω"
    //       }
    // ID: ${user.id}
    // –ö–æ–º–∞–Ω–¥–∞: /start`
    //     );
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
  //   bot.help(async (ctx) => {
  //     const helpMessage = `
  // üìñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:

  // –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π Telegram –±–æ—Ç —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.

  // üîß –§—É–Ω–∫—Ü–∏–∏:
  // ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  // ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  // ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
  // ‚Ä¢ –í–µ–±-–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

  // üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:
  // ‚Ä¢ Backend: Node.js + Express
  // ‚Ä¢ Bot: Telegraf
  // ‚Ä¢ Frontend: HTML/CSS/JS
  // ‚Ä¢ –•—Ä–∞–Ω–∏–ª–∏—â–µ: In-memory

  // üåê –í–µ–±-—Å–∞–π—Ç: ${WEB_SERVERURL}
  //     `;

  //     await ctx.reply(helpMessage);
  //   });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats
  //   bot.command("stats", async (ctx) => {
  //     const userCount = botData.stats.totalUsers;
  //     const messageCount = botData.stats.totalMessages;

  //     const statsMessage = `
  // üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

  // üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount}
  // üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${messageCount}
  // üÜî –í–∞—à ID: ${ctx.from.id}
  // üåê –°–∞–π—Ç: ${WEB_SERVER_URL}
  //     `;

  //     await ctx.reply(statsMessage);
  //   });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /profile
  bot.command("profile", async (ctx) => {
    const user = ctx.from;
    // const userData = botData.users.get(user.id);

    const profileMessage = `
üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

üÜî ID: ${user.id}
üë§ –ò–º—è: ${user.first_name}
üìù –§–∞–º–∏–ª–∏—è: ${user.last_name || "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}
üîó Username: @${user.username || "–ù–µ —É–∫–∞–∑–∞–Ω"}
`;

    await ctx.reply(profileMessage);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /website
  // bot.command("website", async (ctx) => {
  //   await ctx.reply(`üåê –ù–∞—à –≤–µ–±-—Å–∞–π—Ç: ${WEB_SERVER_URL}`, {
  //     reply_markup: {
  //       inline_keyboard: [
  //         [
  //           {
  //             text: "üì± –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç",
  //             url: WEB_SERVER_URL,
  //           },
  //         ],
  //       ],
  //     },
  //   });
  // });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–∫–∏)
  bot.hears("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", async (ctx) => {
    const userCount = botData.stats.totalUsers;
    const messageCount = botData.stats.totalMessages;

    await ctx.reply(
      `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount}\n–°–æ–æ–±—â–µ–Ω–∏–π: ${messageCount}`
    );
  });

  bot.hears("üë§ –ü—Ä–æ—Ñ–∏–ª—å", async (ctx) => {
    const user = ctx.from;
    const profileMessage = `
üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

üÜî ID: ${user.id}
üë§ –ò–º—è: ${user.first_name}
üìù –§–∞–º–∏–ª–∏—è: ${user.last_name || "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}
üîó Username: @${user.username || "–ù–µ —É–∫–∞–∑–∞–Ω"}
`;

    await ctx.reply(profileMessage);
  });

  bot.hears("üåê –°–∞–π—Ç", async (ctx) => {
    await ctx.reply(`üåê –°–∞–π—Ç: ${WEB_SERVER_URL}`);
  });

  bot.hears("‚ÑπÔ∏è –ü–æ–º–æ—â—å", async (ctx) => {
    await ctx.reply("–î–ª—è –ø–æ–º–æ—â–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help");
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on("text", async (ctx) => {
    const user = ctx.from;
    const text = ctx.message.text;

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if (text.startsWith("/")) return;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    // await sendBotEvent("user_message", {
    //   userId: user.id,
    //   firstName: user.first_name,
    //   lastName: user.last_name,
    //   username: user.username,
    //   text: text,
    //   chatId: ctx.chat.id,
    // });

    // –≠—Ö–æ-–æ—Ç–≤–µ—Ç
    // await ctx.reply(`üîÅ –í—ã —Å–∫–∞–∑–∞–ª–∏: "${text}"`);
    await ctx.reply(`‚ö†Ô∏è –ù–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã`);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  bot.catch((err, ctx) => {
    console.error(`Error for ${ctx.updateType}:`, err);
  });

  // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
  bot
    .launch()
    .then(() => {
      console.log("‚úÖ Telegram bot started successfully!");

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
      sendBotEvent("bot_status", { status: "online" });
    })
    .catch((err) => {
      console.error("‚ùå Error starting bot:", err);
      sendBotEvent("bot_status", { status: "error" });
    });

  // –í–∫–ª—é—á–∏—Ç—å graceful stop
  process.once("SIGINT", () => {
    bot.stop("SIGINT");
    sendBotEvent("bot_status", { status: "offline" });
  });
  process.once("SIGTERM", () => {
    bot.stop("SIGTERM");
    sendBotEvent("bot_status", { status: "offline" });
  });

  return {
    bot,
    sendMessageToUser,
    sendAppointmentNotification,
  };
};
