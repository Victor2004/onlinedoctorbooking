const { Telegraf } = require("telegraf");
const axios = require("axios");
require("dotenv").config();

module.exports = (botData) => {
  const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
  const WEB_SERVER_URL = process.env.WEB_SERVER_URL;
  const TELEGRAM_GROUP_ID = process.env.TELEGRAM_GROUP_ID;

  if (!BOT_TOKEN) {
    console.error("‚ùå TELEGRAM_BOT_TOKEN is not set in .env file");
    return;
  }

  const bot = new Telegraf(BOT_TOKEN);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
  async function sendAppointmentNotification(appointmentData) {
    if (!TELEGRAM_GROUP_ID) {
      console.error("‚ùå TELEGRAM_GROUP_ID is not set in .env file");
      return false;
    }

    try {
      const message = formatAppointmentMessage(appointmentData);
      await bot.telegram.sendMessage(TELEGRAM_GROUP_ID, message, {
        parse_mode: "HTML",
      });
      console.log("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É");
      return true;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É:", error.message);
      return false;
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø–∏—Å–∏
  function formatAppointmentMessage(appointmentData) {
    const { doctor, date, time, patient, parentInfo } = appointmentData;

    let message = `üÜï <b>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º</b>\n\n`;
    message += `<b>üë®‚Äç‚öïÔ∏è –í—Ä–∞—á:</b> ${doctor.name}\n`;
    message += `<b>üìÖ –î–∞—Ç–∞:</b> ${formatDisplayDateForTelegram(date)}\n`;
    message += `<b>‚è∞ –í—Ä–µ–º—è:</b> ${time}\n\n`;

    message += `<b>üë§ –ü–∞—Ü–∏–µ–Ω—Ç:</b>\n`;
    message += `‚Ä¢ –§–ò–û: ${patient.fullName}\n`;
    message += `‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${patient.phone}\n`;
    message += `‚Ä¢ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${formatDateForTelegram(patient.birthDate)}\n`;

    if (patient.email) {
      message += `‚Ä¢ Email: ${patient.email}\n`;
    }

    if (patient.isChild) {
      message += `‚Ä¢ üë∂ –†–µ–±–µ–Ω–æ–∫\n`;
    }

    if (patient.isMobilePatient) {
      message += `‚Ä¢ ‚ôø –ù–µ –º–æ–±–∏–ª—å–Ω—ã–π –ø–∞—Ü–∏–µ–Ω—Ç\n`;
    }

    if (parentInfo) {
      message += `\n<b>üë®‚Äçüë¶ –î–∞–Ω–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª—è:</b>\n`;
      message += `‚Ä¢ –§–ò–û: ${parentInfo.fullName}\n`;
      message += `‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${parentInfo.phone}\n`;
      if (parentInfo.email) {
        message += `‚Ä¢ Email: ${parentInfo.email}\n`;
      }
    }

    message += `\nüìã <b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–∞—á–∞:</b>\n${doctor.specialty}`;

    return message;
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç
  function formatDisplayDateForTelegram(dateString) {
    const date = new Date(dateString + "T00:00:00");
    const days = [
      "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
      "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
      "–í—Ç–æ—Ä–Ω–∏–∫",
      "–°—Ä–µ–¥–∞",
      "–ß–µ—Ç–≤–µ—Ä–≥",
      "–ü—è—Ç–Ω–∏—Ü–∞",
      "–°—É–±–±–æ—Ç–∞",
    ];
    const months = [
      "—è–Ω–≤.",
      "—Ñ–µ–≤.",
      "–º–∞—Ä.",
      "–∞–ø—Ä.",
      "–º–∞—è",
      "–∏—é–Ω.",
      "–∏—é–ª.",
      "–∞–≤–≥.",
      "—Å–µ–Ω.",
      "–æ–∫—Ç.",
      "–Ω–æ—è.",
      "–¥–µ–∫.",
    ];

    const day = date.getDate();
    const month = months[date.getMonth()];
    const year = date.getFullYear();
    const dayName = days[date.getDay()];

    return `${day} ${month} ${year} (${dayName})`;
  }

  function formatDateForTelegram(dateString) {
    const date = new Date(dateString);
    const day = String(date.getDate()).padStart(2, "0");
    const month = String(date.getMonth() + 1).padStart(2, "0");
    const year = date.getFullYear();
    return `${day}.${month}.${year}`;
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  const sendBotEvent = async (type, data) => {
    try {
      await axios.post(`${WEB_SERVER_URL}/api/bot-event`, {
        type,
        data,
      });
    } catch (error) {
      console.error("Error sending bot event:", error.message);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –µ–≥–æ id
  async function sendMessageToUser(userId, message, options = {}) {
    try {
      const messageOptions = {
        parse_mode: options.parse_mode || "HTML",
        ...options,
      };

      await bot.telegram.sendMessage(userId, message, messageOptions);
      console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
      return true;
    } catch (error) {
      console.error(
        `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`,
        error.message
      );

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
      if (error.description === "Forbidden: bot was blocked by the user") {
        console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞`);
      } else if (error.description === "Bad Request: chat not found") {
        console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      return false;
    }
  }

  // –î–û–ë–ê–í–õ–Ø–ï–ú –ö–û–ú–ê–ù–î–£ –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø ID –ì–†–£–ü–ü–´
  bot.command("getid", async (ctx) => {
    const chat = ctx.chat;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ/–∫–∞–Ω–∞–ª–µ
    if (chat.type === "private") {
      await ctx.reply(
        `üë§ –í–∞—à –ª–∏—á–Ω—ã–π ID: <code>${chat.id}</code>\n\n` +
          `–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID –≥—Ä—É–ø–ø—ã:\n` +
          `1. –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É\n` +
          `2. –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π\n` +
          `3. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /getid –≤ –≥—Ä—É–ø–ø–µ`,
        { parse_mode: "HTML" }
      );
      return;
    }

    const chatId = chat.id;
    const chatTitle = chat.title || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è";
    const chatType = chat.type;

    let chatTypeText = "";
    switch (chatType) {
      case "group":
        chatTypeText = "–ì—Ä—É–ø–ø–∞";
        break;
      case "supergroup":
        chatTypeText = "–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞";
        break;
      case "channel":
        chatTypeText = "–ö–∞–Ω–∞–ª";
        break;
      default:
        chatTypeText = chatType;
    }

    const message = `
üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:</b>

üè∑ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> ${chatTitle}
üÜî <b>ID —á–∞—Ç–∞:</b> <code>${chatId}</code>
üìù <b>–¢–∏–ø:</b> ${chatTypeText}

üí° <b>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ:</b>
<code>TELEGRAM_GROUP_ID=${chatId}</code>

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ù–µ –¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º ID —Å –¥—Ä—É–≥–∏–º–∏!
    `.trim();

    try {
      await ctx.reply(message, {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å ID",
                callback_data: `copy_id_${chatId}`,
              },
            ],
          ],
        },
      });

      console.log(`‚úÖ ID –≥—Ä—É–ø–ø—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${chatTitle} (${chatId})`);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ID –≥—Ä—É–ø–ø—ã:", error.message);

      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
      try {
        await ctx.reply(
          `ID —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã: ${chatId}\n\n` +
            `–î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:\n` +
            `TELEGRAM_GROUP_ID=${chatId}`
        );
      } catch (fallbackError) {
        console.error(
          "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
          fallbackError.message
        );
      }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å ID"
  bot.action(/copy_id_(-?\d+)/, async (ctx) => {
    const chatId = ctx.match[1];

    await ctx.answerCbQuery(`ID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${chatId}`);

    // –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    await ctx.reply(
      `‚úÖ ID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!\n\n` +
        `–î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –≤ –≤–∞—à .env —Ñ–∞–π–ª:\n\n` +
        `<code>TELEGRAM_GROUP_ID=${chatId}</code>`,
      { parse_mode: "HTML" }
    );
  });

  // –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é ID
  bot.command("id", async (ctx) => {
    await ctx.reply(
      `üÜî <b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID:</b>\n\n` +
        `/getid - –ø–æ–∫–∞–∑–∞—Ç—å ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞\n` +
        `/id - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n` +
        `<i>–†–∞–±–æ—Ç–∞–µ—Ç –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, –≥—Ä—É–ø–ø–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö</i>`,
      { parse_mode: "HTML" }
    );
  });

  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
  module.exports.sendMessageToUser = sendMessageToUser;
  module.exports.sendAppointmentNotification = sendAppointmentNotification;

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
  bot.start(async (ctx) => {
    const user = ctx.from;

    const welcomeMessage = `
üëã –ü—Ä–∏–≤–µ—Ç, ${user.first_name}!

ü§ñ –Ø Telegram –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–ø–∏—Å—è—Ö

üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/getid - –ø–æ–ª—É—á–∏—Ç—å ID –≥—Ä—É–ø–ø—ã
/profile - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ`;

    await ctx.reply(welcomeMessage, {
      reply_markup: {
        keyboard: [["üÜî –ü–æ–ª—É—á–∏—Ç—å ID –≥—Ä—É–ø–ø—ã", "üë§ –ü—Ä–æ—Ñ–∏–ª—å"]],
        resize_keyboard: true,
      },
    });
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /profile
  bot.command("profile", async (ctx) => {
    const user = ctx.from;

    const profileMessage = `
üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

üÜî ID: ${user.id}
üë§ –ò–º—è: ${user.first_name}
üìù –§–∞–º–∏–ª–∏—è: ${user.last_name || "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}
üîó Username: @${user.username || "–ù–µ —É–∫–∞–∑–∞–Ω"}
`;

    await ctx.reply(profileMessage);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–∫–∏)
  bot.hears("üÜî –ü–æ–ª—É—á–∏—Ç—å ID –≥—Ä—É–ø–ø—ã", async (ctx) => {
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É /getid
    await ctx.reply(
      "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /getid –≤ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø–µ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ—ë ID"
    );
  });

  bot.hears("üë§ –ü—Ä–æ—Ñ–∏–ª—å", async (ctx) => {
    const user = ctx.from;
    const profileMessage = `
üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

üÜî ID: ${user.id}
üë§ –ò–º—è: ${user.first_name}
üìù –§–∞–º–∏–ª–∏—è: ${user.last_name || "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}
üîó Username: @${user.username || "–ù–µ —É–∫–∞–∑–∞–Ω"}
`;

    await ctx.reply(profileMessage);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on("text", async (ctx) => {
    const user = ctx.from;
    const text = ctx.message.text;

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if (text.startsWith("/")) return;

    await ctx.reply(
      `‚ö†Ô∏è –ù–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /getid –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –≥—Ä—É–ø–ø—ã`
    );
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  bot.catch((err, ctx) => {
    console.error(`Error for ${ctx.updateType}:`, err);
  });

  // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
  bot
    .launch()
    .then(() => {
      console.log("‚úÖ Telegram bot started successfully!");
      console.log("ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é ID –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /getid");

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
      sendBotEvent("bot_status", { status: "online" });
    })
    .catch((err) => {
      console.error("‚ùå Error starting bot:", err);
      sendBotEvent("bot_status", { status: "error" });
    });

  // –í–∫–ª—é—á–∏—Ç—å graceful stop
  process.once("SIGINT", () => {
    bot.stop("SIGINT");
    sendBotEvent("bot_status", { status: "offline" });
  });
  process.once("SIGTERM", () => {
    bot.stop("SIGTERM");
    sendBotEvent("bot_status", { status: "offline" });
  });

  return {
    bot,
    sendMessageToUser,
    sendAppointmentNotification,
  };
};
